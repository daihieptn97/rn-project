{
  "_args": [
    [
      {
        "raw": "react-native-contacts",
        "scope": null,
        "escapedName": "react-native-contacts",
        "name": "react-native-contacts",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\a _ Lap Trinh\\React Native\\Contact"
    ]
  ],
  "_from": "react-native-contacts@latest",
  "_id": "react-native-contacts@2.2.1",
  "_inCache": true,
  "_location": "/react-native-contacts",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-contacts_2.2.1_1528663113861_0.5338218510064305"
  },
  "_npmUser": {
    "name": "morenoh149",
    "email": "morenoh149@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-contacts",
    "scope": null,
    "escapedName": "react-native-contacts",
    "name": "react-native-contacts",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-contacts/-/react-native-contacts-2.2.1.tgz",
  "_shasum": "afc8745c4c04d1a551f2bd939d52536006fbfaa9",
  "_shrinkwrap": null,
  "_spec": "react-native-contacts",
  "_where": "D:\\a _ Lap Trinh\\React Native\\Contact",
  "author": {
    "name": "rt2zz",
    "email": "zack@root-two.com"
  },
  "bugs": {
    "url": "https://github.com/rt2zz/react-native-contacts/issues"
  },
  "contributors": [
    {
      "name": "Harry Moreno",
      "email": "morenoh149@gmail.com",
      "url": "http://harrymoreno.com/"
    },
    {
      "name": "Nick Pomfret"
    }
  ],
  "dependencies": {},
  "description": "React Native Contacts (android & ios)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "afc8745c4c04d1a551f2bd939d52536006fbfaa9",
    "tarball": "https://registry.npmjs.org/react-native-contacts/-/react-native-contacts-2.2.1.tgz",
    "fileCount": 20,
    "unpackedSize": 167609,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbHYxKCRA9TVsSAnZWagAAInEP/3RCS8pcYZOd25UPFgxh\nNjPiDHv60KJB5slmO54DwasRHi8WU0XjubJTnRcLdFH+MdfetAoD0dnIp9Xm\nDrK6qYBtpwFCXrQbERBfDSZFhFPErOKQxqSuqa/AwQEdU24skjauPiailsy5\no/2EKnd4s9EhBnmep42sC4MzviVX1mYfv0UXJ/3BXpMiytrz44hfAVzqVXhx\nk5pGbDdLejouPDAmon6B58Uas7LDfQwwM1Lv506YIfcWejGz4zY0i0miB5rp\ntajbPI+KS0M/kdqhIChgOwvZCalMHS/0+Jk8KLIruR1Oj7VmycHu15lFNvQv\nDtMw33pv4S7sdVqvbGw1sJ/Sg3CY1CP4Czk1Wl4xtbFkuWkKddQKwd8NCokt\nh0GgWlW9WGiMEezHUAgra8i47Bk86BsHYRMjOQUnJKtyFs6OXUr5Uh3BKTcn\njgV07LE2TamFMs8W1mCcY63YRdJzuI81lTMDdGjn9s8XSlH5JHapeN8ffPn7\nPhPTALMq5QDn+mvAuvCvqMdGB8JbAq0xtZicyl4wRCmAD8Qe+daPxXysuLwf\nzbV4aCUUlpDlEih2xABI4A61qdPx6lId4oeMmKM2gukkDP/i4VP5NJ3aY+PN\nl8aofYtEIIWRijk9eHJr+afvFQ6pZr1AVIb8AwvZpPBFMlQLXa32o0hqoOj8\nPJpr\r\n=CcsA\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "9b589c30cd124bed382b1e36f1c431c6c113e1b7",
  "homepage": "https://github.com/rt2zz/react-native-contacts",
  "keywords": [
    "react-native",
    "react",
    "react-component",
    "addressbook",
    "contacts",
    "ios",
    "android"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "morenoh149",
      "email": "morenoh149@gmail.com"
    },
    {
      "name": "npomfret",
      "email": "nick-npm@snowmonkey.co.uk"
    },
    {
      "name": "rt2zz",
      "email": "ztstory@gmail.com"
    }
  ],
  "name": "react-native-contacts",
  "nativePackage": true,
  "optionalDependencies": {},
  "readme": "# React Native Contacts\nTo contribute read [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Usage\n`getAll` is a database intensive process, and can take a long time to complete depending on the size of the contacts list. Because of this, it is recommended you access the `getAll` method before it is needed, and cache the results for future use.\n\n```js\nvar Contacts = require('react-native-contacts')\n\nContacts.getAll((err, contacts) => {\n  if (err) throw err;\n\n  // contacts returned\n  console.log(contacts)\n})\n```\n\n`getContactMatchingString` is meant to alleviate the amount of time it takes to get all contacts, by filtering on the native side based on a string.\n\n```js\nvar Contacts = require('react-native-contacts')\n\nContacts.getContactsMatchingString(\"filter\", (err, contacts) => {\n  if (err) throw err;\n\n  // contacts matching \"filter\"\n  console.log(contacts)\n})\n```\n## Installation\n\n\n### With React Native Link\nrun:\n\n    npm install react-native-contacts\n    react-native link react-native-contacts\n\nor if you use yarn:\n\n    yarn add react-native-contacts\n    react-native link react-native-contacts\n\n### Manual installation\n\n1. In XCode, in the project navigator, right click Libraries âžœ Add Files to [your project's name]\n1. add ./node_modules/react-native-contacts/ios/RCTContacts.xcodeproj\n1. In the XCode project navigator, select your project, select the Build Phases tab and in the Link Binary With Libraries section add libRCTContacts.a\n\n### iOS Permissions\n\nAs of Xcode 8 and React Native 0.33 it is now **necessary to add kit specific \"permission\" keys** to your Xcode `Info.plist` file, in order to make `requestPermission` work. Otherwise your app crashes when requesting the specific permission. I discovered this after days of frustration.\n\nOpen Xcode > Info.plist > Add a key (starting with \"Privacy - ...\") with your kit specific permission. The value for the key is optional in development. If you submit to the App Store the value must explain why you need this permission.\n\nYou have to add the key \"Privacy - Contacts Usage Description\".\n\n<img width=\"338\" alt=\"screen shot 2016-09-21 at 13 13 21\" src=\"https://cloud.githubusercontent.com/assets/5707542/18704973/3cde3b44-7ffd-11e6-918b-63888e33f983.png\">\n\n### Android Permissions\nAndroid requires allowing permissions with https://facebook.github.io/react-native/docs/permissionsandroid.html\nThe `READ_CONTACTS` permission is automatically added to the `AndroidManifest.xml`, so you just need request it. If your app also needs to create contacts, don't forget to add `WRITE_CONTACTS` permission to the manifest and request it at runtime. \n\n## API\n * `getAll` (callback) - returns *all* contacts as an array of objects\n * `getAllWithoutPhotos` - same as `getAll` on Android, but on iOS it will not return uris for contact photos (because there's a significant overhead in creating the images)\n * `getPhotoForId(contactId, callback)` - returns a URI (or null) for a contacts photo\n * `addContact` (contact, callback) - adds a contact to the AddressBook.  \n * `openContactForm` (contact, callback) - create a new contact and display in contactsUI.  \n * `updateContact` (contact, callback) - where contact is an object with a valid recordID  \n * `deleteContact` (contact, callback) - where contact is an object with a valid recordID  \n * `getContactsMatchingString` (string, callback) - where string is any string to match a name (first, middle, family) to\n * `checkPermission` (callback) - checks permission to access Contacts _ios only_\n * `requestPermission` (callback) - request permission to access Contacts _ios only_\n\nCallbacks follow node-style:\n```sh\ncallback <Function>\n  err <Error>\n  response <Object>\n```\n\n## Example Contact Record\n```js\n{\n  recordID: '6b2237ee0df85980',\n  company: \"\",\n  emailAddresses: [{\n    label: \"work\",\n    email: \"carl-jung@example.com\",\n  }],\n  familyName: \"Jung\",\n  givenName: \"Carl\",\n  jobTitle: \"\",\n  middleName: \"\",\n  phoneNumbers: [{\n    label: \"mobile\",\n    number: \"(555) 555-5555\",\n  }],\n  hasThumbnail: true,\n  thumbnailPath: 'content://com.android.contacts/display_photo/3',\n  postalAddresses: [\n    {\n      street: '123 Fake Street',\n      city: 'Sample City',\n      state: 'CA',\n      region: 'CA',\n      postCode: '90210',\n      country: 'USA',\n      label: 'home'\n    }\n  ],\n  birthday: {\"year\": 1988, \"month\": 0, \"day\": 1 }\n}\n```\n**NOTE**\n* on Android versions below 8 the entire display name is passed in the `givenName` field. `middleName` and `familyName` will be `\"\"`.\n\n## Adding Contacts\nCurrently all fields from the contact record except for thumbnailPath are supported for writing\n```js\nvar newPerson = {\n  emailAddresses: [{\n    label: \"work\",\n    email: \"mrniet@example.com\",\n  }],\n  familyName: \"Nietzsche\",\n  givenName: \"Friedrich\",\n}\n\nContacts.addContact(newPerson, (err) => {\n  if (err) throw err;\n  // save successful\n})\n```\n\n## Open Contact Form\nCurrently all fields from the contact record except for thumbnailPath are supported for writing\n```js\nvar newPerson = {\n  emailAddresses: [{\n    label: \"work\",\n    email: \"mrniet@example.com\",\n  }],\n  familyName: \"Nietzsche\",\n  givenName: \"Friedrich\",\n}\n\nContacts.openContactForm(newPerson, (err) => {\n  if (err) throw err;\n  // form is open\n})\n```\nYou may want to edit the contact before saving it into your phone book. So using `openContactForm` allow you to prompt default phone create contacts UI and the new to-be-added contact will be display on the contacts UI view. Click save or cancel button will exit the contacts UI view.\n\n## Updating and Deleting Contacts\nExample\n```js\nContacts.getAll((err, contacts) => {\n  if (err) throw err;\n\n  // update the first record\n  let someRecord = contacts[0]\n  someRecord.emailAddresses.push({\n    label: \"junk\",\n    email: \"mrniet+junkmail@test.com\",\n  })\n  Contacts.updateContact(someRecord, (err) => {\n    if (err) throw err;\n    // record updated\n  })\n\n  //delete the second record\n  Contacts.deleteContact(contacts[1], (err, recordId) => {\n    if (err) throw err;\n    // contact deleted\n  })\n})\n```\nUpdate and delete reference contacts by their recordID (as returned by the OS in getContacts). Apple does not guarantee the recordID will not change, e.g. it may be reassigned during a phone migration. Consequently you should always grab a fresh contact list with `getContacts` before performing update and delete operations.\n\nYou can also delete a record using only it's recordID\n```es\nContacts.deleteContact({recordID: 1}, (err, recordId) => {\n  if (err) throw err;\n  // contact deleted\n})\n```\n\n## Displaying Thumbnails\n\nThe thumbnailPath is the direct URI for the temp location of the contact's cropped thumbnail image.\n\n```js\n<Image source={{uri: contact.thumbnailPath}} />\n```\n\n## Permissions Methods (optional)\n`checkPermission` (callback) - checks permission to access Contacts.  \n`requestPermission` (callback) - request permission to access Contacts.  \n\nUsage as follows:\n```js\nContacts.checkPermission((err, permission) => {\n  if (err) throw err;\n\n  // Contacts.PERMISSION_AUTHORIZED || Contacts.PERMISSION_UNDEFINED || Contacts.PERMISSION_DENIED\n  if (permission === 'undefined') {\n    Contacts.requestPermission((err, permission) => {\n      // ...\n    })\n  }\n  if (permission === 'authorized') {\n    // yay!\n  }\n  if (permission === 'denied') {\n    // x.x\n  }\n})\n```\n\nThese methods are only useful on iOS. For Android you'll have to use https://facebook.github.io/react-native/docs/permissionsandroid.html\n\nThese methods do **not** re-request permission if permission has already been granted or denied. This is a limitation in iOS, the best you can do is prompt the user with instructions for how to enable contacts from the phone settings page `Settings > [app name] > contacts`.\n\n## LICENSE\n\n[MIT License](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rt2zz/react-native-contacts.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "types": "index.d.ts",
  "version": "2.2.1"
}
